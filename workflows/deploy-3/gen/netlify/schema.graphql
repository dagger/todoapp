
	extend type Query {
		"Core API"
		core: Core!

		"TODO doc"
		host: Host!
	}

	"Core API"
	type Core {
		"Fetch an OCI image"
		image(ref: String!): Filesystem!

		"Fetch a git repository"
		git(remote: String!, ref: String): Filesystem!

		"Fetch a client directory"
		clientdir(id: String!): Filesystem!
	}

	"TODO move these to their own file"
	type Host {
		workdir: LocalDir!
	}

	"TODO move these to their own file"
	type LocalDir {
		read: Filesystem!
		write(contents: FSID!): Boolean!
	}
	

	scalar FSID

	"""
	A reference to a filesystem tree.

	For example:
	 - The root filesystem of a container
	 - A source code repository
	 - A directory containing binary artifacts

	Rule of thumb: if it fits in a tar archive, it fits in a Filesystem.
	"""
	type Filesystem {
		id: FSID!

		"read a file at path"
		file(path: String!, lines: Int): String

		# FIXME: this should be in execSchema. However, removing this results in an error:
		# failed to resolve all type definitions: [Core Query Filesystem Exec]
		"execute a command inside this filesystem"
		exec(input: ExecInput!): Exec!
	}

	extend type Core {
		"Look up a filesystem by its ID"
		filesystem(id: FSID!): Filesystem!
	}
	

	"Project representation"
	type Project {
		"name of the project"
		name: String!

		"merged schema of the project's sources (if any)"
		schema: String

		"merged operations of the project's sources (if any)"
		operations: String

		"sources for this project"
		sources: [ProjectSource!]

		"dependencies for this project"
		dependencies: [Project!]

		"install the project, stitching its schema into the API"
		install: Boolean!
	}

	"Project source representation"
	type ProjectSource {
		"path to the source in the project filesystem"
		path: String!

		"schema associated with the source (if any)"
		schema: String

		"operations associated with the source (if any)"
		operations: String

		"sdk of the source"
		sdk: String!
	}

	extend type Filesystem {
		"load a project's metadata"
		loadProject(configPath: String!): Project!
	}

	extend type Core {
		"Look up a project by name"
		project(name: String!): Project!
	}
	

	"Command execution"
	type Exec {
		"Modified filesystem"
		fs: Filesystem!

		"stdout of the command"
		stdout(lines: Int): String

		"stderr of the command"
		stderr(lines: Int): String

		"Exit code of the command"
		exitCode: Int

		"Modified mounted filesystem"
		mount(path: String!): Filesystem!
	}

	input MountInput {
		"filesystem to mount"
		fs: FSID!

		"path at which the filesystem will be mounted"
		path: String!
	}

	input ExecInput {
		"""
		Command to execute
		Example: ["echo", "hello, world!"]
		"""
		args: [String!]!

		"Filesystem mounts"
		mounts: [MountInput!]

		"Working directory"
		workdir: String
	}

	# FIXME: broken
	# extend type Filesystem {
	#	"execute a command inside this filesystem"
	# 	exec(input: ExecInput!): Exec!
	# }
	

	extend type Filesystem {
		"docker build using this filesystem as context"
		dockerbuild(dockerfile: String): Filesystem!
	}
	

	scalar SecretID

	extend type Core {
		"Look up a secret by ID"
		secret(id: SecretID!): String!

		"Add a secret"
		addSecret(plaintext: String!): SecretID!
	}
	

extend type Query {
  netlify: Netlify!
}

type Netlify {
  deploy(
    contents: FSID!
    subdir: String
    siteName: String
    token: SecretID!
  ): Deploy!
}

type Deploy {
  url: String!
  deployURL: String!
  logsURL: String
}
